// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//Deciding A reg control bit
	Not(in=instruction[15], out=noti);
	And(a=instruction[15], b=instruction[5], out=andi);
	Or(a=noti, b=andi, out=Aregctrl);
	
	//A register input mux deciding instruction or outloop
	Mux16(a=instruction, b=outloop, sel=instruction[15], out=MUX1out);
	
	//A reg takes in value depending on Aregctrl
	ARegister(in=MUX1out, load=Aregctrl, out=Aout, out[0..14]=addressM);
	
	//choosing A to input or M
	Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUin);
	
	//setting up D reg
	And(a=instruction[4], b=instruction[15], out=Dload); //cause nly work in case of c instruction
	DRegister(in=outloop, load=Dload, out=Dregout);

	//to write or not to write M
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	//calculating using ALU
	ALU(x=Dregout, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outloop, zr=zrchck, ng=ngchck);
	
	// jump
  	Or(a=zrchck, b=ngchck, out=orzrng);
        // out > 0
   	Not(in=orzrng, out=positive);
  	And(a=instruction[0], b=positive, out=JGT);
	// out = 0
   	And(a=instruction[1], b=zrchck, out=JEQ);
 	// out < 0
   	And(a=instruction[2], b=ngchck, out=JLT);
    	Or(a=JGT, b=JEQ, out=or1);
    	Or(a=or1, b=JLT, out=or2);
    	And(a=or2, b=instruction[15], out=JUMP);
    	PC(in=Aout, load=JUMP, inc=true, reset=reset, out[0..14]=pc);
}